#!/usr/bin/env node
var async = require('async');
var net = require('net');
var https = require('https');
var mysql = require('mysql');

console.log('Start script');
console.time('Processed in');

/* Set up config */

var appConfig = require('../config.js'),
    exampleAppConfig = require('../config.example.js');


/* Set up database connection */

console.log('Init database connection');

var appdbconn = mysql.createConnection({
	host: cfg.appdb.host,
	database: cfg.appdb.database,
	user: cfg.appdb.user,
	password: cfg.appdb.password
});

appdbconn.connect();


/* Set up helper function */

function sendRequest(options, callback) {
	options = {
		host: options.host,
		port: options.port,
		path: '/',
		method: 'GET',
		headers: {
			'Content-Type': 'application/json'
		}
	};

	var req = https.request(options, function(res) {
		var output = '';

		res.setEncoding('utf8');

		res.on('data', function (chunk) {
			output += chunk;
		});

		res.on('end', function() {
			if (res.statusCode === 200) {
				callback(true);
			} else {
				callback(false);
			}
		});
	});

	req.on('error', function(err) {
		callback(false);
	});

	req.end();
};


/* Set up object 'prototype' */

var obj = {
	web: {
		status: null
	},
	api: {
		status: null
	},
	help: {
		status: null
	},
	dev: {
		status: null
	},
	main: {
		status: null,
		online: null
	}
};

var cfg = {
    main: {
        host: (appConfig.srv.main) ? appConfig.srv.main.host : exampleAppConfig.srv.main.host,
        port: (appConfig.srv.main) ? appConfig.srv.main.port : exampleAppConfig.srv.main.port
    },
    api: {
        host: (appConfig.srv.api) ? appConfig.srv.api.host : exampleAppConfig.srv.api.host,
        port: (appConfig.srv.api) ? appConfig.srv.api.port : exampleAppConfig.srv.api.port
    },
    help: {
        host: (appConfig.srv.help) ? appConfig.srv.help.host : exampleAppConfig.srv.help.host,
        port: (appConfig.srv.help) ? appConfig.srv.help.port : exampleAppConfig.srv.help.port
    },
    dev: {
        host: (appConfig.srv.dev) ? appConfig.srv.dev.host : exampleAppConfig.srv.dev.host,
        port: (appConfig.srv.dev) ? appConfig.srv.dev.port : exampleAppConfig.srv.dev.port
    },
    web: {
        host: (appConfig.srv.web) ? appConfig.srv.web.host : exampleAppConfig.srv.web.host,
        port: (appConfig.srv.web) ? appConfig.srv.web.port : exampleAppConfig.srv.web.port
    }
};

/* Main logic */

console.log('Process logic...');

async.waterfall([
	function getWebServerStatus(callback) {
		sendRequest({
			port: cfg.srv.web.port,
			host: cfg.srv.web.host
		}, function (status) {
			obj.web.status = status;

			callback(null, obj);
		});
	},
	function getAPIServerStatus(obj, callback) {
		sendRequest({
			port: cfg.srv.api.port,
			host: cfg.srv.api.host
		}, function (status) {
			obj.api.status = status;

			callback(null, obj);
		});
	},
	function getSupportSystemStatus(obj, callback) {
		sendRequest({
			port: cfg.srv.help.port,
			host: cfg.srv.help.host
		}, function (status) {
			obj.help.status = status;

			callback(null, obj);
		});
	},
	function getDevPanelStatus(obj, callback) {
		sendRequest({
			port: cfg.srv.dev.port,
			host: cfg.srv.dev.host
		}, function (status) {
			obj.dev.status = status;

			callback(null, obj);
		});
	},
	function getGameServerStatus(obj, callback) {
		var socket = net.connect({
			port: cfg.srv.main.port,
			host: cfg.srv.main.host
		}, function() {
			buf = new Buffer(2);
			buf[0] = 254;
			buf[1] = 1;
			socket.write(buf);
		});

		socket.setTimeout(4000, function () {
			if (callback != undefined) {
				obj.main.status = false;

				callback(null, obj);
			}
			socket.end();
		});

		socket.on("data", function(data) {
			var newdata = [];
			if (data[0] == 255) { // Server's magic response
				var iszero = false,
					y = 0;
				for (var i =  1; i < data.length; i++) {
					if (data[i] === 0 && iszero) { // Separator
						if (newdata[y].length > 0)
							y++;
						newdata[y] = "";
						continue;
					}
					if (newdata[y] === undefined) {
						newdata[y] = "";
					}
					if (data[i] !== 0) {
						iszero = false;
						var newchar = String.fromCharCode(data[i]);
						if (newchar !== undefined) {
							newdata[y] = newdata[y] + newchar;
						}
					} else {
						iszero = true;
					}
				}
				newdata = newdata[0].split('§');

				obj.main.status = true;
				obj.main.online = parseInt(newdata[1], 10);

				callback(null, obj);
			} else {
				obj.status = false;

				callback(null, obj);
			}
			socket.end();
		});

		socket.once('error', function(e) {
			obj.game.status = false;

			callback(null, obj);
		});
	},
	function convertBooleansToNumbers(obj, callback) {
		obj.main.status = Number(obj.main.status);
		obj.web.status = Number(obj.web.status);
		obj.api.status = Number(obj.api.status);
		obj.help.status = Number(obj.help.status);
		obj.dev.status = Number(obj.help.status);
		
		callback(null, obj);
	},
	function putDataToDB(obj, callback) {
		appdbconn.query('INSERT INTO `statuses` (`id`, `main_status`, `main_online`, `web_status`, `api_status`, `help_status`, `dev_status`, `createdAt`) VALUES (NULL, "' + obj.main.status + '", "' + obj.main.online + '", "' + obj.web.status + '", "' + obj.api.status + '", "' + obj.help.status + "," + obj.dev.status + '", CURRENT_TIMESTAMP);', function (err, result) {
			if (err) return callback(err);
			
			callback(null, obj);
		});
	},
	function removeExtraData(obj, callback) {
		// 2629743 – human/Earth month
		appdbconn.query('DELETE FROM `statuses` WHERE UNIX_TIMESTAMP() - UNIX_TIMESTAMP(`createdAt`) > 2629743', function (err, result) {
			if (err) return callback(err);
			
			callback(null, obj);
		});
	}
], function (err, obj) {
	if (err) throw err;
	
	/* Close database connection and stop script */
	console.log('DONE. Close database connection and exit.');
	console.timeEnd('Processed in');
	
	appdbconn.end();

	process.exit(0);
});